<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <interval>0</interval>
    <entry type="predatasource">
        <name>{{ ds_name }}_OpenMetrics</name>
        <displayedas>{{ ds_name }} (OpenMetrics)</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>false</useWildValueAsUniqueIdentifier>
        <schedule>180</schedule>
        <appliesTo>{{ ds_name}}.openmetrics.host</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>_WeenigWare</group>
        <tags>application,push metrics,prometheus,openmetrics</tags>
        <technology>Optional Properties:
openmetrics.port (default: 8000)
openmetrics.path (default: &#39;/metrics&#39;)</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>import com.santaba.agent.groovyapi.http.HTTP
client_hostname = hostProps.get(&#34;system.hostname&#34;)
client_port = hostProps.get(&#34;openmetrics.port&#34;) ?: 8000
endpoint_path = hostProps.get(&#34;openmetrics.path&#34;) ?: &#34;/metrics&#34;

def http = HTTP.open(client_hostname, client_port.toInteger());http.get(endpoint_path);http.close()
http.getResponseBody().eachLine { line -&#62;
    if (!(line ==~ /^#.*/)) {
        data = line.tokenize(&#34; &#34;)
        metric_name = data[0].replaceAll(/\{/,&#34;_&#34;).replaceAll(&#34;=&#34;,&#34;_&#34;).replaceAll(&#34;}&#34;,&#34;&#34;).replaceAll(&#34;\&#34;&#34;,&#34;&#34;).replaceAll(&#34;,&#34;,&#34;_&#34;).replaceAll(/\./,&#34;_&#34;)
        println(&#34;${metric_name}=${data[1]}&#34;)
    }
}
return 0</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>properties</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>manualConnections</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        {% for metric in metrics %}<datapoint>
            <name>{{ metric.name }}</name>
            <dataType>7</dataType>
            {% if metric.type == "gauge" %}<type>2</type>{% else %}<type>1</type>{% endif %}
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>{{ metric.name }}</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>{{ metric.desc }}. This metric is a {{ metric.type }} type metric.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>{% endfor %}
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
