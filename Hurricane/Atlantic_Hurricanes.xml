<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1687816005</version>
        <name>Atlantic Hurricanes</name>
        <displayedas>Atlantic Hurricanes</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>false</useWildValueAsUniqueIdentifier>
        <schedule>3600</schedule>
        <appliesTo>system.displayname == &#34;National Hurricane Center&#34;</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>true</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>import groovy.util.XmlParser

def parser = new XmlParser()
try {
   def rss = parser.parseText(new URL(&#34;https://www.nhc.noaa.gov/index-at.xml&#34;).getText())
   rss.channel.&#39;*&#39;.each{
      if ((it.name() == &#34;item&#34;) &#38;&#38; !(it.title.text().startsWith(&#34;There are no tropical cyclone&#34;))){
         wildvalue = it.title.text().replaceAll(&#34;=&#34;,&#34;&#34;).replaceAll(&#34;:&#34;,&#34;&#34;).replaceAll(&#34;#&#34;,&#34;&#34;).replaceAll(&#34; &#34;,&#34;&#34;)
         println(&#34;${wildvalue}##${it.title.text()}&#34;)
      }
   }
   return 0
} catch (Exception e){println(e);return 1}
</wildcardgroovyscript>
        <wildcardschedule>0</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>true</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>_WeenigWare</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"embeded","groovyscript":"import groovy.util.XmlParser\r\n\r\ndef parser = new XmlParser()\r\ntry {\r\n   def rss = parser.parseText(new URL(\"https://www.nhc.noaa.gov/index-at.xml\").getText())\r\n   rss.channel.'*'.each{\r\n      if ((it.name() == \"item\") && !(it.title.text().startsWith(\"There are no tropical cyclone\"))){\r\n         wildvalue = it.title.text().replaceAll(\"=\",\"\").replaceAll(\":\",\"\").replaceAll(\"#\",\"\").replaceAll(\" \",\"\")\r\n         println(\"${wildvalue}##${it.title.text()}\")\r\n      }\r\n   }\r\n   return 0\r\n} catch (Exception e){println(e);return 1}\r\n"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>import groovy.util.XmlParser

curr_wildvalue = taskProps.get(&#34;WILDVALUE&#34;)
def parser = new XmlParser()
try {
   def rss = parser.parseText(new URL(&#34;https://www.nhc.noaa.gov/index-at.xml&#34;).getText())
   rss.channel.&#39;*&#39;.each{
      if ((it.name() == &#34;item&#34;) &#38;&#38; !(it.title.text().startsWith(&#34;There are no tropical cyclone&#34;))){
         wildvalue = it.title.text().replaceAll(&#34;=&#34;,&#34;&#34;).replaceAll(&#34;:&#34;,&#34;&#34;).replaceAll(&#34;#&#34;,&#34;&#34;).replaceAll(&#34; &#34;,&#34;&#34;)
         msg = it.description.text().replaceAll(&#34;&#60;br/&#62;&#34;,&#34;&#34;)
         if (wildvalue == curr_wildvalue){
            println(it.description.text().replaceAll(&#34;&#60;br/&#62;&#34;,&#34;\n&#34;).replaceAll(&#34;&#60;br /&#62;&#34;,&#34;\n&#34;).replaceAll(&#34;\n\n&#34;,&#34;\n&#34;).replaceAll(&#34;\n\n&#34;,&#34;\n&#34;).replaceAll(&#34;\n\n&#34;,&#34;\n&#34;).replaceAll(&#34;\n\n&#34;,&#34;\n&#34;).replaceAll(&#34;\n\n&#34;,&#34;\n&#34;))
         }
      }
   }
   return 0
} catch (Exception e){println(e);return 1}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>properties</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>manualConnections</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>RetrievalFail</name>
            <originId>Uw0wc8WiQT2DOZ4X6N1D6Q</originId>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;fetch_check&#34;:{&#34;fetch&#34;:1},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <maxdigits>4</maxdigits>
            <userparam1>fetch</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>1</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
